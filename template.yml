AWSTemplateFormatVersion: "2010-09-09"

Description: >
    MD IDS CoCreate RDS Backup/Restore DB UI
Parameters:
  DbStackName:
    Type: String
  PgAdminSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet in which the PgAdmin server will be deployed.
  AppName:
    Type: String
  CostCenter:
    Type: String
  CostCenterApprover:
    Type: String
  SystemOwner:
    Type: String
  SystemCustodian:
    Type: String
  PrimaryItContact:
    Type: String
  Level1BusinessArea:
    Type: String
  DataClassification:
    Type: String
    AllowedValues:
      - "Green"
      - "Yellow"
      - "Orange"
      - "Red"
      - "TBD"
  Hipaa:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
      - "TBD"

Resources:
  WebSecurityGroup:
    Type: Custom::LillySecurityGroup
    Properties:
      ServiceToken: !ImportValue RVM-LambdaARN
      DefinitionName: LillyNetworkHttpAccess
      VpcId: !ImportValue DefaultVPC
      Tags:
        ProjectName: !Ref AppName
        SystemCustodian: !Ref SystemCustodian
        SystemOwner: !Ref SystemOwner
        PrimaryItContact: !Ref PrimaryItContact
        CostCenter: !Ref CostCenter
        CostCenterApprover: !Ref CostCenterApprover
        Level1BusinessArea: !Ref Level1BusinessArea
        DataClassification: !Ref DataClassification
        Hipaa: !Ref Hipaa

  PgAdminServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/LZ-Sandbox-Boundary"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: "PgAdminServer-Secrets-Access"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref PgAdminCredentials


  PgAdminServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref PgAdminServerInstanceRole

  PgAdminServer:
    Type: AWS::EC2::Instance
    DependsOn: PgAdminCredentials
    Properties:
      ImageId: ami-00399ec92321828f5
      InstanceType: t2.micro
      IamInstanceProfile: !Ref PgAdminServerInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId: !Ref PgAdminSubnet
          DeviceIndex: 0
          DeleteOnTermination: true
          GroupSet:
            - !GetAtt WebSecurityGroup.GroupId
            - !Ref PgAdminInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update -y
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PgAdminServer --region ${AWS::Region} --configsets ec2_setup
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PgAdminServer --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ec2_setup:
            - update_apt_for_pgadmin_install
            - install_pgadmin
            - configure_pgadmin
        update_apt_for_pgadmin_install:
          commands:
            01_update_apt:
              command: sudo apt-get update
            02_upgrade_ca_certificates:
              command: sudo apt-get install ca-certificates -y
            03_add_pgadmin_repo_to_apt_db:
              command: sudo curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
            04_update_apt_db:
              command: sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
        install_pgadmin:
          packages:
            apt:
              pgadmin4: []
              pgadmin4-web: []
        configure_pgadmin:
          packages:
            apt:
              expect: []
              jq: []
              awscli: []
          files:
            /home/ubuntu/setup-web.exp:
              content: |
                #!/usr/bin/expect -f
                set email [lindex $argv 0];
                set password [lindex $argv 1];
                spawn sudo /usr/pgadmin4/bin/setup-web.sh
                expect "Email address: "
                send -- "${email}\n"
                expect "Password: "
                send -- "${password}\n"
                expect "Retype password: "
                send -- "${password}\n"
                expect "(y/n)? "
                send -- "y\n"
                expect "(y/n)? "
                send -- "y\n"
                expect eof
              mode: "000755"
          commands:
            01_run_pgadmin_setup:
              command: !Sub "/home/ubuntu/setup-web.exp $(aws secretsmanager get-secret-value --secret-id ${PgAdminCredentials} --region ${AWS::Region} --query SecretString | jq --raw-output | jq -r .email) $(aws secretsmanager get-secret-value --secret-id ${PgAdminCredentials} --region ${AWS::Region} --query SecretString | jq --raw-output | jq -r .password)"

  PgAdminCredentials:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Credentials for logging into pgAdmin
      GenerateSecretString:
        SecretStringTemplate: '{"email": "pgadmin@example.com"}'
        GenerateStringKey: "password"
        PasswordLength: 16

  PgAdminCredentialsResourcePolicy:
    Type: 'AWS::SecretsManager::ResourcePolicy'
    Properties:
      SecretId: !Ref PgAdminCredentials
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Resource: "*"
            Action: secretsmanager:GetSecretValue
            Effect: Allow
            Principal:
              AWS: !GetAtt PgAdminServerInstanceRole.Arn 

  PgAdminInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [' ', ['Allow pgAdmin access to', Fn::ImportValue: !Sub "${DbStackName}-RdsDatabaseName" ]]
      VpcId: !ImportValue DefaultVPC

  DbIngress01:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 
        Fn::ImportValue: !Sub "${DbStackName}-RdsDatabaseEndpointPort"
      ToPort: 
        Fn::ImportValue: !Sub "${DbStackName}-RdsDatabaseEndpointPort"
      SourceSecurityGroupId: !GetAtt PgAdminInstanceSecurityGroup.GroupId
      Description: Database Access
      GroupId: 
        Fn::ImportValue: !Sub "${DbStackName}-RdsSecurityGroupId"

Outputs:
  PgAdminUrl:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt PgAdminServer.PublicDnsName
        - "/pgadmin4"
